{"results": [{"node": {"raw_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "staging", "stg_flash"], "unique_id": "model.order_history.stg_flash", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "staging/stg_flash.sql", "original_file_path": "models/staging/stg_flash.sql", "name": "stg_flash", "resource_type": "model", "alias": "stg_flash", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/staging/stg_flash.sql", "compiled": true, "compiled_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.6322989463806152, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:10.762774Z", "completed_at": "2020-04-29T17:44:10.778116Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:10.778625Z", "completed_at": "2020-04-29T17:44:13.394239Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "staging", "stg_order"], "unique_id": "model.order_history.stg_order", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "staging/stg_order.sql", "original_file_path": "models/staging/stg_order.sql", "name": "stg_order", "resource_type": "model", "alias": "stg_order", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/staging/stg_order.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 3.0480289459228516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:13.396485Z", "completed_at": "2020-04-29T17:44:13.402326Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:13.402646Z", "completed_at": "2020-04-29T17:44:16.443556Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    customer_unique_id,\n    email,\n    first_name,\n    last_name\nfrom ticketing.customers", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "staging", "stg_customers"], "unique_id": "model.order_history.stg_customers", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "name": "stg_customers", "resource_type": "model", "alias": "stg_customers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/staging/stg_customers.sql", "compiled": true, "compiled_sql": "select\n    customer_unique_id,\n    email,\n    first_name,\n    last_name\nfrom ticketing.customers", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    customer_unique_id,\n    email,\n    first_name,\n    last_name\nfrom ticketing.customers", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0406949520111084, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:16.446655Z", "completed_at": "2020-04-29T17:44:16.453049Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:16.453369Z", "completed_at": "2020-04-29T17:44:17.486034Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "staging", "stg_events"], "unique_id": "model.order_history.stg_events", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "staging/stg_events.sql", "original_file_path": "models/staging/stg_events.sql", "name": "stg_events", "resource_type": "model", "alias": "stg_events", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/staging/stg_events.sql", "compiled": true, "compiled_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0511980056762695, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:17.488786Z", "completed_at": "2020-04-29T17:44:17.495504Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:17.495831Z", "completed_at": "2020-04-29T17:44:18.538967Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    event_unique_id,\n    ticket_id,\n    ticket_state\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "intermediate", "order_flash"], "unique_id": "model.order_history.order_flash", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "intermediate/order_flash.sql", "original_file_path": "models/intermediate/order_flash.sql", "name": "order_flash", "resource_type": "model", "alias": "order_flash", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order"], ["stg_flash"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.order_history.stg_order", "model.order_history.stg_flash"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/intermediate/order_flash.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    event_unique_id,\n    ticket_id,\n    ticket_state\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    event_unique_id,\n    ticket_id,\n    ticket_state\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.664496898651123, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:18.540935Z", "completed_at": "2020-04-29T17:44:18.550394Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:18.550669Z", "completed_at": "2020-04-29T17:44:20.204502Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with customers as (\n    select * from {{ ref('stg_customers')}}\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n    customer_unique_id,\n    email,\n    CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n    first_name,\n    last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "intermediate", "customer_broker"], "unique_id": "model.order_history.customer_broker", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "intermediate/customer_broker.sql", "original_file_path": "models/intermediate/customer_broker.sql", "name": "customer_broker", "resource_type": "model", "alias": "customer_broker", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.order_history.stg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/intermediate/customer_broker.sql", "compiled": true, "compiled_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n    customer_unique_id,\n    email,\n    CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n    first_name,\n    last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n    customer_unique_id,\n    email,\n    CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n    first_name,\n    last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.857944965362549, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:20.207248Z", "completed_at": "2020-04-29T17:44:20.215360Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:20.215678Z", "completed_at": "2020-04-29T17:44:23.064274Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with order_flash as (\n    select * from {{ref('order_flash')}}\n),\nevents as (\n    select * from {{ref('stg_events')}}\n)\n\nselect * FROM order_flash INNER JOIN events USING (event_unique_id)", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "intermediate", "order_flash_event"], "unique_id": "model.order_history.order_flash_event", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "intermediate/order_flash_event.sql", "original_file_path": "models/intermediate/order_flash_event.sql", "name": "order_flash_event", "resource_type": "model", "alias": "order_flash_event", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_flash"], ["stg_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.order_history.order_flash", "model.order_history.stg_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/intermediate/order_flash_event.sql", "compiled": true, "compiled_sql": "with order_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n)\n\nselect * FROM order_flash INNER JOIN events USING (event_unique_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with order_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n)\n\nselect * FROM order_flash INNER JOIN events USING (event_unique_id)", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.233506202697754, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:23.066256Z", "completed_at": "2020-04-29T17:44:23.073348Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:23.073651Z", "completed_at": "2020-04-29T17:44:24.298660Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with customers as (\n    select * from {{ ref('customer_broker')}}\n),\norder_flash as (\n    select * from {{ ref('order_flash_event')}}\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "customers"], "unique_id": "model.order_history.customers", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "customers.sql", "original_file_path": "models/customers.sql", "name": "customers", "resource_type": "model", "alias": "customers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["customer_broker"], ["order_flash_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.order_history.customer_broker", "model.order_history.order_flash_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/customers.sql", "compiled": true, "compiled_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"customer_broker\"\n),\norder_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_event\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"customer_broker\"\n),\norder_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_event\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2343978881835938, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T17:44:24.301192Z", "completed_at": "2020-04-29T17:44:24.310074Z"}, {"name": "execute", "started_at": "2020-04-29T17:44:24.310344Z", "completed_at": "2020-04-29T17:44:25.534712Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-04-29T17:44:26.292434Z", "elapsed_time": 17.465683937072754}