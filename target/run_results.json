{"results": [{"node": {"raw_sql": "with customers as (\n    select * from {{ ref('customer_broker')}}\n),\norder_flash as (\n    select * from {{ ref('order_flash_event')}}\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["order_history", "customers"], "unique_id": "model.order_history.customers", "package_name": "order_history", "root_path": "/Users/jdeng/dbt_projects/dbt-orders", "path": "customers.sql", "original_file_path": "models/customers.sql", "name": "customers", "resource_type": "model", "alias": "customers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["customer_broker"], ["order_flash_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.order_history.customer_broker", "model.order_history.order_flash_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/order_history/customers.sql", "compiled": true, "compiled_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"customer_broker\"\n),\norder_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_event\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"customer_broker\"\n),\norder_flash as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_event\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        SUM(amount_gross) AS total_revenue,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        SUM(FLOOR(COALESCE(datediff(days, onsale_date, sale_datetime), 0))) / COUNT(DISTINCT CASE WHEN (datediff(days, onsale_date, sale_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(datediff(days, sale_datetime, event_datetime), 0)))/ COUNT(DISTINCT CASE WHEN (datediff(days, sale_datetime, event_datetime))IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event\n\n    from order_flash\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9899659156799316, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-04-29T01:34:53.676991Z", "completed_at": "2020-04-29T01:34:53.697071Z"}, {"name": "execute", "started_at": "2020-04-29T01:34:53.697544Z", "completed_at": "2020-04-29T01:34:54.665904Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-04-29T01:34:54.795771Z", "elapsed_time": 3.5940332412719727}