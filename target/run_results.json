{"results": [{"node": {"raw_sql": "with events as (\n    SELECT\n        event_unique_id,\n        onsale_date,\n        event_datetime,\n        venue_unique_id,\n        major_category_name\n    FROM\n        ticketing.events\n        INNER JOIN analytics.event_onsale USING (event_unique_id)\n        LEFT JOIN analytics.mdl_major_category_event USING (event_unique_id)\n    WHERE event_name NOT ilike 'test event%'\n        AND event_name NOT ilike '%base event%'\n        AND event_name NOT ilike '% test event%'\n        AND event_name NOT ilike '%- RR Base%'\n        AND (nvl(ticketing.events.is_exclude,false)) is false\n),\nvenues as (\n    SELECT\n        venue_unique_id,\n        left(venue_zip, 5) as venue_zip,\n        venue_type\n        from ticketing.venues LEFT JOIN data_science.venue_type\n        USING (venue_unique_id)\n),\nfinal as (\n    SELECT\n        *\n    FROM events INNER JOIN venues USING (venue_unique_id)\n)\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_events"], "unique_id": "model.customer_history.stg_events", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_events.sql", "original_file_path": "models/staging/stg_events.sql", "name": "stg_events", "resource_type": "model", "alias": "stg_events", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_events.sql", "compiled": true, "compiled_sql": "with events as (\n    SELECT\n        event_unique_id,\n        onsale_date,\n        event_datetime,\n        venue_unique_id,\n        major_category_name\n    FROM\n        ticketing.events\n        INNER JOIN analytics.event_onsale USING (event_unique_id)\n        LEFT JOIN analytics.mdl_major_category_event USING (event_unique_id)\n    WHERE event_name NOT ilike 'test event%'\n        AND event_name NOT ilike '%base event%'\n        AND event_name NOT ilike '% test event%'\n        AND event_name NOT ilike '%- RR Base%'\n        AND (nvl(ticketing.events.is_exclude,false)) is false\n),\nvenues as (\n    SELECT\n        venue_unique_id,\n        left(venue_zip, 5) as venue_zip,\n        venue_type\n        from ticketing.venues LEFT JOIN data_science.venue_type\n        USING (venue_unique_id)\n),\nfinal as (\n    SELECT\n        *\n    FROM events INNER JOIN venues USING (venue_unique_id)\n)\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with events as (\n    SELECT\n        event_unique_id,\n        onsale_date,\n        event_datetime,\n        venue_unique_id,\n        major_category_name\n    FROM\n        ticketing.events\n        INNER JOIN analytics.event_onsale USING (event_unique_id)\n        LEFT JOIN analytics.mdl_major_category_event USING (event_unique_id)\n    WHERE event_name NOT ilike 'test event%'\n        AND event_name NOT ilike '%base event%'\n        AND event_name NOT ilike '% test event%'\n        AND event_name NOT ilike '%- RR Base%'\n        AND (nvl(ticketing.events.is_exclude,false)) is false\n),\nvenues as (\n    SELECT\n        venue_unique_id,\n        left(venue_zip, 5) as venue_zip,\n        venue_type\n        from ticketing.venues LEFT JOIN data_science.venue_type\n        USING (venue_unique_id)\n),\nfinal as (\n    SELECT\n        *\n    FROM events INNER JOIN venues USING (venue_unique_id)\n)\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 0.932913064956665, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:06.236880Z", "completed_at": "2021-08-05T18:39:06.254012Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:06.254412Z", "completed_at": "2021-08-05T18:39:07.168827Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_flash"], "unique_id": "model.customer_history.stg_flash", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_flash.sql", "original_file_path": "models/staging/stg_flash.sql", "name": "stg_flash", "resource_type": "model", "alias": "stg_flash", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_flash.sql", "compiled": true, "compiled_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.2842650413513184, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:07.170995Z", "completed_at": "2021-08-05T18:39:07.177468Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:07.177769Z", "completed_at": "2021-08-05T18:39:09.454416Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT \n    axs_customer_id as customer_unique_id,\n    axs_email_hash,\n    -- left(zip, 5) as zip -- eleminate situation as 01234-1234\n    zip_code as zip\nFROM analytics.demographics_all -- instead of ticketing.customers\n\n--  no need to join SQL at this moment\n--     CASE WHEN b.email is not null THEN 1 ELSE 0 END AS is_broker\n-- FROM ticketing.customers c LEFT JOIN analytics.yield_manager_partners b \n-- on lower(c.email)=lower(b.email)", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_customers"], "unique_id": "model.customer_history.stg_customers", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "name": "stg_customers", "resource_type": "model", "alias": "stg_customers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_customers.sql", "compiled": true, "compiled_sql": "SELECT \n    axs_customer_id as customer_unique_id,\n    axs_email_hash,\n    -- left(zip, 5) as zip -- eleminate situation as 01234-1234\n    zip_code as zip\nFROM analytics.demographics_all -- instead of ticketing.customers\n\n--  no need to join SQL at this moment\n--     CASE WHEN b.email is not null THEN 1 ELSE 0 END AS is_broker\n-- FROM ticketing.customers c LEFT JOIN analytics.yield_manager_partners b \n-- on lower(c.email)=lower(b.email)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n    axs_customer_id as customer_unique_id,\n    axs_email_hash,\n    -- left(zip, 5) as zip -- eleminate situation as 01234-1234\n    zip_code as zip\nFROM analytics.demographics_all -- instead of ticketing.customers\n\n--  no need to join SQL at this moment\n--     CASE WHEN b.email is not null THEN 1 ELSE 0 END AS is_broker\n-- FROM ticketing.customers c LEFT JOIN analytics.yield_manager_partners b \n-- on lower(c.email)=lower(b.email)", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.349107027053833, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:09.456611Z", "completed_at": "2021-08-05T18:39:09.463097Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:09.463393Z", "completed_at": "2021-08-05T18:39:10.804605Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'CST' and lower(zone_type_description) in ('admissions', 'premium seating')", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_order_cst"], "unique_id": "model.customer_history.stg_order_cst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_order_cst.sql", "original_file_path": "models/staging/stg_order_cst.sql", "name": "stg_order_cst", "resource_type": "model", "alias": "stg_order_cst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_order_cst.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'CST' and lower(zone_type_description) in ('admissions', 'premium seating')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'CST' and lower(zone_type_description) in ('admissions', 'premium seating')", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2006340026855469, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:10.807678Z", "completed_at": "2021-08-05T18:39:10.814968Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:10.815280Z", "completed_at": "2021-08-05T18:39:12.007145Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'EST' and lower(zone_type_description) in ('admissions', 'premium seating')", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_order_est"], "unique_id": "model.customer_history.stg_order_est", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_order_est.sql", "original_file_path": "models/staging/stg_order_est.sql", "name": "stg_order_est", "resource_type": "model", "alias": "stg_order_est", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_order_est.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'EST' and lower(zone_type_description) in ('admissions', 'premium seating')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'EST' and lower(zone_type_description) in ('admissions', 'premium seating')", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.3028640747070312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:12.009159Z", "completed_at": "2021-08-05T18:39:12.014835Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:12.015131Z", "completed_at": "2021-08-05T18:39:13.311306Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'MST' and lower(zone_type_description) in ('admissions', 'premium seating')", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_order_mst"], "unique_id": "model.customer_history.stg_order_mst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_order_mst.sql", "original_file_path": "models/staging/stg_order_mst.sql", "name": "stg_order_mst", "resource_type": "model", "alias": "stg_order_mst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_order_mst.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'MST' and lower(zone_type_description) in ('admissions', 'premium seating')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'MST' and lower(zone_type_description) in ('admissions', 'premium seating')", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.262706995010376, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:13.313199Z", "completed_at": "2021-08-05T18:39:13.318420Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:13.318661Z", "completed_at": "2021-08-05T18:39:14.575188Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'PST' and lower(zone_type_description) in ('admissions', 'premium seating')", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_order_pst"], "unique_id": "model.customer_history.stg_order_pst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "staging/stg_order_pst.sql", "original_file_path": "models/staging/stg_order_pst.sql", "name": "stg_order_pst", "resource_type": "model", "alias": "stg_order_pst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_order_pst.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'PST' and lower(zone_type_description) in ('admissions', 'premium seating')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    -- zone_unique_id,\n    pricing_mode_id,\n    -- price_code_type,\n    CASE WHEN price_code_type ilike '%season%' THEN 1 ELSE 0 END AS is_season_ticket,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN config.context_configuration config USING(context_id)\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nconfig.timezone = 'PST' and lower(zone_type_description) in ('admissions', 'premium seating')", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.3513538837432861, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:14.577497Z", "completed_at": "2021-08-05T18:39:14.582785Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:14.583062Z", "completed_at": "2021-08-05T18:39:15.927969Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order_cst')}}\n),\nevents as (\n    select * from {{ ref('stg_events')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_flash_events_cst"], "unique_id": "model.customer_history.order_flash_events_cst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_flash_events_cst.sql", "original_file_path": "models/intermediate/order_flash_events_cst.sql", "name": "order_flash_events_cst", "resource_type": "model", "alias": "order_flash_events_cst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order_cst"], ["stg_events"], ["stg_flash"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_order_cst", "model.customer_history.stg_events", "model.customer_history.stg_flash"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_flash_events_cst.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_cst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_cst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.4077188968658447, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:15.930296Z", "completed_at": "2021-08-05T18:39:15.941370Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:15.941708Z", "completed_at": "2021-08-05T18:39:17.337218Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order_est')}}\n),\nevents as (\n    select * from {{ ref('stg_events')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_flash_events_est"], "unique_id": "model.customer_history.order_flash_events_est", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_flash_events_est.sql", "original_file_path": "models/intermediate/order_flash_events_est.sql", "name": "order_flash_events_est", "resource_type": "model", "alias": "order_flash_events_est", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order_est"], ["stg_events"], ["stg_flash"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_order_est", "model.customer_history.stg_events", "model.customer_history.stg_flash"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_flash_events_est.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_est\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_est\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.015662908554077, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:17.339415Z", "completed_at": "2021-08-05T18:39:17.348055Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:17.348323Z", "completed_at": "2021-08-05T18:39:19.354106Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order_mst')}}\n),\nevents as (\n    select * from {{ ref('stg_events')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_flash_events_mst"], "unique_id": "model.customer_history.order_flash_events_mst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_flash_events_mst.sql", "original_file_path": "models/intermediate/order_flash_events_mst.sql", "name": "order_flash_events_mst", "resource_type": "model", "alias": "order_flash_events_mst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order_mst"], ["stg_events"], ["stg_flash"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_order_mst", "model.customer_history.stg_events", "model.customer_history.stg_flash"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_flash_events_mst.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_mst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_mst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2390987873077393, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:19.355852Z", "completed_at": "2021-08-05T18:39:19.365621Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:19.365908Z", "completed_at": "2021-08-05T18:39:20.594202Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order_pst')}}\n),\nevents as (\n    select * from {{ ref('stg_events')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_flash_events_pst"], "unique_id": "model.customer_history.order_flash_events_pst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_flash_events_pst.sql", "original_file_path": "models/intermediate/order_flash_events_pst.sql", "name": "order_flash_events_pst", "resource_type": "model", "alias": "order_flash_events_pst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order_pst"], ["stg_events"], ["stg_flash"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_order_pst", "model.customer_history.stg_events", "model.customer_history.stg_flash"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_flash_events_pst.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_pst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order_pst\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\n\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    channel,\n    sale_datetime,\n    pricing_mode_id,\n    is_season_ticket,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    venue_unique_id,\n    venue_zip,\n    venue_type,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    major_category_name,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2265567779541016, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:20.596275Z", "completed_at": "2021-08-05T18:39:20.607086Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:20.607370Z", "completed_at": "2021-08-05T18:39:21.821959Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM {{ ref('order_flash_events_cst')}}       \n),\ncustomers as (\n    SELECT * FROM {{ref('stg_customers')}}\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_ticket_details_cst"], "unique_id": "model.customer_history.order_ticket_details_cst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_ticket_details_cst.sql", "original_file_path": "models/intermediate/order_ticket_details_cst.sql", "name": "order_ticket_details_cst", "resource_type": "model", "alias": "order_ticket_details_cst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_flash_events_cst"], ["stg_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.order_flash_events_cst", "model.customer_history.stg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_ticket_details_cst.sql", "compiled": true, "compiled_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_cst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_cst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 3.4997010231018066, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:21.824142Z", "completed_at": "2021-08-05T18:39:21.831370Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:21.831689Z", "completed_at": "2021-08-05T18:39:25.322853Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM {{ ref('order_flash_events_est')}}       \n),\ncustomers as (\n    SELECT * FROM {{ref('stg_customers')}}\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_ticket_details_est"], "unique_id": "model.customer_history.order_ticket_details_est", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_ticket_details_est.sql", "original_file_path": "models/intermediate/order_ticket_details_est.sql", "name": "order_ticket_details_est", "resource_type": "model", "alias": "order_ticket_details_est", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_flash_events_est"], ["stg_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.order_flash_events_est", "model.customer_history.stg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_ticket_details_est.sql", "compiled": true, "compiled_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_est\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_est\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 3.2434651851654053, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:25.324857Z", "completed_at": "2021-08-05T18:39:25.332271Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:25.332587Z", "completed_at": "2021-08-05T18:39:28.567589Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM {{ ref('order_flash_events_mst')}}       \n),\ncustomers as (\n    SELECT * FROM {{ref('stg_customers')}}\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_ticket_details_mst"], "unique_id": "model.customer_history.order_ticket_details_mst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_ticket_details_mst.sql", "original_file_path": "models/intermediate/order_ticket_details_mst.sql", "name": "order_ticket_details_mst", "resource_type": "model", "alias": "order_ticket_details_mst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_flash_events_mst"], ["stg_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.order_flash_events_mst", "model.customer_history.stg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_ticket_details_mst.sql", "compiled": true, "compiled_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_mst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_mst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9891979694366455, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:28.569803Z", "completed_at": "2021-08-05T18:39:28.577683Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:28.578079Z", "completed_at": "2021-08-05T18:39:29.558154Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM {{ ref('order_flash_events_pst')}}       \n),\ncustomers as (\n    SELECT * FROM {{ref('stg_customers')}}\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_ticket_details_pst"], "unique_id": "model.customer_history.order_ticket_details_pst", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "intermediate/order_ticket_details_pst.sql", "original_file_path": "models/intermediate/order_ticket_details_pst.sql", "name": "order_ticket_details_pst", "resource_type": "model", "alias": "order_ticket_details_pst", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_flash_events_pst"], ["stg_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.order_flash_events_pst", "model.customer_history.stg_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_ticket_details_pst.sql", "compiled": true, "compiled_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_pst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- calculate distance between customer location vs event location\n\nwith orders as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"order_flash_events_pst\"       \n),\ncustomers as (\n    SELECT * FROM \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\nzipcodes as (\n    select zipcode, longitude, latitude from public.us_zipcodes\n    where primary_record='P'\n),\n-- customers_zip as (\n--     Select\n--         customers.*,\n--         CAST(longitude AS DOUBLE PRECISION) as customer_long,\n--         CAST(latitude AS DOUBLE PRECISION) as customer_lat\n--     FROM customers LEFT JOIN zipcodes ON customers.zip=zipcodes.zipcode\n-- ),\n-- orders_zip as (\n--     Select\n--         orders.*,\n--         CAST(longitude AS DOUBLE PRECISION) as venue_long,\n--         CAST(latitude AS DOUBLE PRECISION) as venue_lat\n--     FROM orders LEFT JOIN zipcodes ON orders.venue_zip=zipcodes.zipcode\n-- ),\nfinal as (\n    SELECT\n        customer_unique_id,\n        axs_email_hash,\n        order_ticket_unique_id,\n        ROW_NUMBER() over (PARTITION BY order_ticket_unique_id ORDER BY \n        order_ticket_unique_id) AS order_ticket_identifier, -- to remove duplicate order_ticket_unique_id\n        order_unique_id,\n        amount_gross,\n        channel,\n        sale_datetime,\n        pricing_mode_id,\n        -- price_code_type,\n        is_season_ticket,\n        transfer_action_id,\n        event_unique_id,\n        ticket_id,\n        ticket_state,\n        days_sold_after_onsale,\n        days_sold_before_event,\n        venue_unique_id,\n        venue_type,\n        major_category_name,\n        is_canceled,\n        round(ST_DistanceSphere(ST_Point(CAST(c_zip.longitude AS DOUBLE PRECISION), CAST(c_zip.latitude AS DOUBLE PRECISION)), \n        ST_Point(CAST(v_zip.longitude AS DOUBLE PRECISION), CAST(v_zip.latitude AS DOUBLE PRECISION))) / 1000, 0) AS order_distance_in_km,\n        order_distance_in_km / 1.6 AS order_distance_in_miles\n    from customers\n    INNER join orders using (customer_unique_id)\n    LEFT JOIN zipcodes c_zip ON customers.zip=c_zip.zipcode\n    LEFT JOIN zipcodes v_zip ON orders.venue_zip=v_zip.zipcode\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0075678825378418, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:29.559933Z", "completed_at": "2021-08-05T18:39:29.568509Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:29.568798Z", "completed_at": "2021-08-05T18:39:30.566778Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }}\n\nwith cst as (\n    select * from {{ ref('order_ticket_details_cst')}}\n),\nest as (\n    select * from {{ ref('order_ticket_details_est')}}\n),\nmst as (\n    select * from {{ ref('order_ticket_details_mst')}}\n),\npst as (\n    select * from {{ ref('order_ticket_details_pst')}}\n),\nfinal as (\n    SELECT * from cst\n    UNION\n    SELECT * from est\n    UNION\n    SELECT * from mst\n    UNION\n    SELECT * from pst\n)\n\nSELECT * FROM final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "fct_order_ticket_details"], "unique_id": "model.customer_history.fct_order_ticket_details", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "fct_order_ticket_details.sql", "original_file_path": "models/fct_order_ticket_details.sql", "name": "fct_order_ticket_details", "resource_type": "model", "alias": "fct_order_ticket_details", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["order_ticket_details_cst"], ["order_ticket_details_est"], ["order_ticket_details_mst"], ["order_ticket_details_pst"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.order_ticket_details_cst", "model.customer_history.order_ticket_details_est", "model.customer_history.order_ticket_details_mst", "model.customer_history.order_ticket_details_pst"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/fct_order_ticket_details.sql", "compiled": true, "compiled_sql": "\n\nwith cst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_cst\"\n),\nest as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_est\"\n),\nmst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_mst\"\n),\npst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_pst\"\n),\nfinal as (\n    SELECT * from cst\n    UNION\n    SELECT * from est\n    UNION\n    SELECT * from mst\n    UNION\n    SELECT * from pst\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith cst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_cst\"\n),\nest as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_est\"\n),\nmst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_mst\"\n),\npst as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_ticket_details_pst\"\n),\nfinal as (\n    SELECT * from cst\n    UNION\n    SELECT * from est\n    UNION\n    SELECT * from mst\n    UNION\n    SELECT * from pst\n)\n\nSELECT * FROM final", "wrapped_sql": null}, "error": null, "status": "SELECT", "execution_time": 2422.2751557826996, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T18:39:30.568616Z", "completed_at": "2021-08-05T18:39:30.579169Z"}, {"name": "execute", "started_at": "2021-08-05T18:39:30.579407Z", "completed_at": "2021-08-05T19:19:52.842874Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }}\n\nwith orders as (\n    select * from {{ ref('fct_order_ticket_details')}}\n),\n\ncustomer_orders as (\n    select\n        axs_email_hash,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n\n        SUM(CASE WHEN order_ticket_identifier=1 THEN amount_gross ELSE 0 END) AS total_revenue,\n\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN days_sold_after_onsale ELSE 0 END), 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN  days_sold_before_event ELSE 0 END), 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        AVG(CASE WHEN order_ticket_identifier=1 THEN order_distance_in_km ELSE NULL END) AS average_order_distance_in_km,\n\n        COUNT(DISTINCT venue_unique_id) AS number_of_venues,\n\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Back Office' THEN order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_back_office_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Web' THEN\n            order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_web_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Sports' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_sports_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Music' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Arts & Family' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_arts_family_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Arena' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_arena_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Large Music Venue' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_large_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Club and Theater' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_club_theatre_percent,\n\n        COUNT(DISTINCT CASE WHEN is_season_ticket = 1 THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n        -- COUNT(DISTINCT CASE WHEN price_code_type ilike '%season%' THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n\n    from orders\n    WHERE is_canceled is FALSE -- shall this condition live elsewhere?\n    group by 1 \n)\nselect * from customer_orders", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "dim_customers_email_acxiom"], "unique_id": "model.customer_history.dim_customers_email_acxiom", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker US/dbt-build/dbt-orders", "path": "dim_customers_email_acxiom.sql", "original_file_path": "models/dim_customers_email_acxiom.sql", "name": "dim_customers_email_acxiom", "resource_type": "model", "alias": "dim_customers_email_acxiom", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["fct_order_ticket_details"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.fct_order_ticket_details"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/dim_customers_email_acxiom.sql", "compiled": true, "compiled_sql": "\n\nwith orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"fct_order_ticket_details\"\n),\n\ncustomer_orders as (\n    select\n        axs_email_hash,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n\n        SUM(CASE WHEN order_ticket_identifier=1 THEN amount_gross ELSE 0 END) AS total_revenue,\n\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN days_sold_after_onsale ELSE 0 END), 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN  days_sold_before_event ELSE 0 END), 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        AVG(CASE WHEN order_ticket_identifier=1 THEN order_distance_in_km ELSE NULL END) AS average_order_distance_in_km,\n\n        COUNT(DISTINCT venue_unique_id) AS number_of_venues,\n\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Back Office' THEN order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_back_office_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Web' THEN\n            order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_web_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Sports' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_sports_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Music' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Arts & Family' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_arts_family_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Arena' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_arena_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Large Music Venue' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_large_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Club and Theater' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_club_theatre_percent,\n\n        COUNT(DISTINCT CASE WHEN is_season_ticket = 1 THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n        -- COUNT(DISTINCT CASE WHEN price_code_type ilike '%season%' THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n\n    from orders\n    WHERE is_canceled is FALSE -- shall this condition live elsewhere?\n    group by 1 \n)\nselect * from customer_orders", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"fct_order_ticket_details\"\n),\n\ncustomer_orders as (\n    select\n        axs_email_hash,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n\n        SUM(CASE WHEN order_ticket_identifier=1 THEN amount_gross ELSE 0 END) AS total_revenue,\n\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN days_sold_after_onsale ELSE 0 END), 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE((CASE WHEN order_ticket_identifier=1 THEN  days_sold_before_event ELSE 0 END), 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers,\n\n        AVG(CASE WHEN order_ticket_identifier=1 THEN order_distance_in_km ELSE NULL END) AS average_order_distance_in_km,\n\n        COUNT(DISTINCT venue_unique_id) AS number_of_venues,\n\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Back Office' THEN order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_back_office_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN channel='Web' THEN\n            order_ticket_unique_id ELSE NULL END) *1.0 / number_of_tickets_sold, 2) AS channel_web_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Sports' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_sports_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Music' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN major_category_name='Arts & Family' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS cat_arts_family_percent,\n\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Arena' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_arena_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Large Music Venue' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_large_music_percent,\n        ROUND(COUNT(DISTINCT CASE WHEN venue_type='Club and Theater' THEN\n            event_unique_id ELSE NULL END) *1.0 / number_of_events, 2) AS venue_club_theatre_percent,\n\n        COUNT(DISTINCT CASE WHEN is_season_ticket = 1 THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n        -- COUNT(DISTINCT CASE WHEN price_code_type ilike '%season%' THEN order_ticket_unique_id ELSE NULL END) AS number_of_season_tickets\n\n    from orders\n    WHERE is_canceled is FALSE -- shall this condition live elsewhere?\n    group by 1 \n)\nselect * from customer_orders", "wrapped_sql": null}, "error": null, "status": "SELECT", "execution_time": 241.35191106796265, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-08-05T19:19:52.845580Z", "completed_at": "2021-08-05T19:19:52.856200Z"}, {"name": "execute", "started_at": "2021-08-05T19:19:52.856684Z", "completed_at": "2021-08-05T19:23:54.196493Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-08-05T19:23:54.386868Z", "elapsed_time": 2690.464686155319}