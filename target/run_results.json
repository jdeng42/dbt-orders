{"results": [{"node": {"raw_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_events"], "unique_id": "model.customer_history.stg_events", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "staging/stg_events.sql", "original_file_path": "models/staging/stg_events.sql", "name": "stg_events", "resource_type": "model", "alias": "stg_events", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_events.sql", "compiled": true, "compiled_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    event_unique_id,\n    onsale_date,\n    event_datetime\nFROM\n    ticketing.events\n    INNER JOIN analytics.event_onsale USING (event_unique_id)\nWHERE event_name NOT ilike 'test event%'\n      AND event_name NOT ilike '%base event%'\n      AND event_name NOT ilike '% test event%'\n      AND event_name NOT ilike '%- RR Base%'\n      AND (nvl(ticketing.events.is_exclude,false)) is false", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 1.13584303855896, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:06.205135Z", "completed_at": "2020-05-06T00:52:06.223617Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:06.224148Z", "completed_at": "2020-05-06T00:52:07.339865Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_flash"], "unique_id": "model.customer_history.stg_flash", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "staging/stg_flash.sql", "original_file_path": "models/staging/stg_flash.sql", "name": "stg_flash", "resource_type": "model", "alias": "stg_flash", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_flash.sql", "compiled": true, "compiled_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    ticket_state,\n    ticket_id,\n    transfer_action_id,\n    fk_order_unique_id,\n    fk_seat_unique_id\nFROM\n    flash.tickets LEFT JOIN flash.forwards USING (ticket_id)", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 3.434875249862671, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:07.342824Z", "completed_at": "2020-05-06T00:52:07.354884Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:07.355342Z", "completed_at": "2020-05-06T00:52:10.776387Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_order"], "unique_id": "model.customer_history.stg_order", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "staging/stg_order.sql", "original_file_path": "models/staging/stg_order.sql", "name": "stg_order", "resource_type": "model", "alias": "stg_order", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_order.sql", "compiled": true, "compiled_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    zone_unique_id,\n    pricing_mode_id,\n    seat_unique_id,\n    ticketing.order_tickets.event_unique_id,\n    is_canceled\nfrom ticketing.order_tickets\nINNER JOIN ticketing.price_codes USING(price_code_unique_id)\nINNER JOIN ticketing.zones USING (zone_unique_id)\nWHERE \nlower(zone_type_description)  in ('admissions', 'premium seating') AND \nis_canceled is FALSE -- where shall this condition lives?", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.201831102371216, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:10.778687Z", "completed_at": "2020-05-06T00:52:10.786207Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:10.786652Z", "completed_at": "2020-05-06T00:52:12.979459Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with customers as (\n    SELECT\n        customer_unique_id,\n        email,\n        first_name,\n        last_name\n    From ticketing.customers\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n        customer_unique_id,\n        email,\n        CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n        first_name,\n        last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "staging", "stg_customers"], "unique_id": "model.customer_history.stg_customers", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "name": "stg_customers", "resource_type": "model", "alias": "stg_customers", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/staging/stg_customers.sql", "compiled": true, "compiled_sql": "with customers as (\n    SELECT\n        customer_unique_id,\n        email,\n        first_name,\n        last_name\n    From ticketing.customers\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n        customer_unique_id,\n        email,\n        CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n        first_name,\n        last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with customers as (\n    SELECT\n        customer_unique_id,\n        email,\n        first_name,\n        last_name\n    From ticketing.customers\n),\n\nbrokers as (\n    SELECT email as broker_email\n    FROM analytics.yield_manager_partners\n),\n\nfinal as (\n    SELECT \n        customer_unique_id,\n        email,\n        CASE WHEN broker_email is not null THEN 1 ELSE 0 END AS is_broker,\n        first_name,\n        last_name\n    FROM customers LEFT JOIN brokers on lower(customers.email)=brokers.broker_email\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.7173960208892822, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:12.982709Z", "completed_at": "2020-05-06T00:52:12.989799Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:12.990136Z", "completed_at": "2020-05-06T00:52:15.698871Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\n    select * from {{ ref('stg_order')}}\n),\nflash as (\n    select * from {{ ref('stg_flash')}}\n),\nevents as (\n    select * from {{ref('stg_events')}}\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final\nWHERE is_canceled is FALSE -- shall this condition live else?", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "intermediate", "order_flash_events"], "unique_id": "model.customer_history.order_flash_events", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "intermediate/order_flash_events.sql", "original_file_path": "models/intermediate/order_flash_events.sql", "name": "order_flash_events", "resource_type": "model", "alias": "order_flash_events", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_order"], ["stg_flash"], ["stg_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_order", "model.customer_history.stg_flash", "model.customer_history.stg_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/intermediate/order_flash_events.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final\nWHERE is_canceled is FALSE -- shall this condition live else?", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_order\"\n),\nflash as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_flash\"\n),\nevents as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_events\"\n),\norder_flash as (\n    SELECT *\n    from orders LEFT JOIN flash ON flash.fk_order_unique_id=orders.order_unique_id\n        and flash.fk_seat_unique_id=orders.seat_unique_id\n),\nfinal as (\n    SELECT\n    order_ticket_unique_id,\n    order_unique_id,\n    customer_unique_id,\n    amount_gross,\n    sale_datetime,\n    pricing_mode_id,\n    transfer_action_id,\n    events.event_unique_id,\n    ticket_id,\n    ticket_state,\n    datediff(days, onsale_date, sale_datetime) AS days_sold_after_onsale,\n    datediff(days, sale_datetime, event_datetime) AS days_sold_before_event,\n    is_canceled\n    FROM order_flash INNER JOIN events USING (event_unique_id)\n)\n\nSELECT * FROM final\nWHERE is_canceled is FALSE -- shall this condition live else?", "wrapped_sql": null}, "error": null, "status": "CREATE VIEW", "execution_time": 2.0865492820739746, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:15.701497Z", "completed_at": "2020-05-06T00:52:15.712895Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:15.713227Z", "completed_at": "2020-05-06T00:52:17.786998Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }}\n\nwith customers as (\n    select * from {{ ref('stg_customers')}}\n),\norders as (\n    select * from {{ ref('order_flash_events')}}\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n        SUM(amount_gross) AS total_revenue,\n\n        SUM(FLOOR(COALESCE(days_sold_after_onsale, 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(days_sold_before_event, 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers\n\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.number_of_events,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "database": "data_platform_prod", "schema": "data_science", "fqn": ["customer_history", "dim_customers"], "unique_id": "model.customer_history.dim_customers", "package_name": "customer_history", "root_path": "/Users/jdeng/OneDrive - AXS/Broker analysis/dbt-orders", "path": "dim_customers.sql", "original_file_path": "models/dim_customers.sql", "name": "dim_customers", "resource_type": "model", "alias": "dim_customers", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_customers"], ["order_flash_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.customer_history.stg_customers", "model.customer_history.order_flash_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/customer_history/dim_customers.sql", "compiled": true, "compiled_sql": "\n\nwith customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\norders as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_events\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n        SUM(amount_gross) AS total_revenue,\n\n        SUM(FLOOR(COALESCE(days_sold_after_onsale, 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(days_sold_before_event, 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers\n\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.number_of_events,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith customers as (\n    select * from \"data_platform_prod\".\"data_science\".\"stg_customers\"\n),\norders as (\n    select * from \"data_platform_prod\".\"data_science\".\"order_flash_events\"\n),\n\ncustomer_orders as (\n    select\n        customer_unique_id,\n        min(sale_datetime) as first_order_date,\n        max(sale_datetime) as most_recent_order_date,\n        COUNT(DISTINCT CASE WHEN (NOT COALESCE(pricing_mode_id = 1 , FALSE)) THEN \n        order_ticket_unique_id ELSE NULL END) AS tickets_sold_no_comps,\n        COUNT(DISTINCT order_ticket_unique_id) AS number_of_tickets_sold,\n        COUNT(DISTINCT order_unique_id) AS number_of_orders,\n        COUNT(DISTINCT event_unique_id) AS number_of_events,\n        SUM(amount_gross) AS total_revenue,\n\n        SUM(FLOOR(COALESCE(days_sold_after_onsale, 0))) / COUNT(DISTINCT CASE WHEN days_sold_after_onsale IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_after_onsale,\n        SUM(FLOOR(COALESCE(days_sold_before_event, 0)))/ COUNT(DISTINCT CASE WHEN days_sold_before_event IS NOT NULL THEN \n        order_ticket_unique_id  ELSE NULL END) AS average_days_sold_before_event,\n\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        ticket_id ELSE NULL END) AS count_transferred_tickets,\n        COUNT(DISTINCT CASE WHEN (ticket_state = 'TRANSFERRED') THEN \n        transfer_action_id || ':' || ticket_id  ELSE NULL END) AS count_transfers\n\n    from orders\n    group by 1\n),\nfinal as (\n    select\n        customers.customer_unique_id,\n        customers.email,\n        customers.is_broker,\n        customer_orders.first_order_date,\n        customer_orders.most_recent_order_date,\n        customer_orders.tickets_sold_no_comps,\n        customer_orders.number_of_orders,\n        customer_orders.number_of_tickets_sold,\n        customer_orders.number_of_events,\n        customer_orders.total_revenue,\n        average_days_sold_after_onsale,\n        average_days_sold_before_event,\n        customer_orders.count_transferred_tickets,\n        customer_orders.count_transfers\n    from customers\n    left join customer_orders using (customer_unique_id)\n)\nselect * from final", "wrapped_sql": null}, "error": null, "status": "SELECT", "execution_time": 956.6342368125916, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T00:52:17.789611Z", "completed_at": "2020-05-06T00:52:17.800108Z"}, {"name": "execute", "started_at": "2020-05-06T00:52:17.800444Z", "completed_at": "2020-05-06T01:08:14.422697Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-05-06T01:08:14.560159Z", "elapsed_time": 969.8538451194763}